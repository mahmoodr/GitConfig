# Put this in your ~/.gitconfig or ~/.config/git/config
# Windows users: "~" is your profile's home directory, e.g. C:\Users\<YourName>

[user]
  name = Your Full Name  # The name that will appear in your commits
  email = your@email.tld  # The email that will appear in your commits

[color]
  # Enable colors in color-supporting terminals
  ui = auto

[alias]
  # List available aliases
  aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
  
  # Command shortcuts
  ci = commit  # Shortened command for `git commit`
  co = checkout  # Shortened command for `git checkout`
  st = status  # Shortened command for `git status`
  
  # Display tree-like log, because default log is a pain…
  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  
  # Useful when you have to update your last commit with staged files without editing the commit message
  oops = commit --amend --no-edit

  # Ensure that force-pushing won't lose someone else's work (only mine)
  push-with-lease = push --force-with-lease
  
  # Rebase won’t trigger hooks on each "replayed" commit
  rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
  
  # List local commits that were not pushed to remote repository
  review-local = "!git lg @{push}.."
  
  # Edit last commit message
  reword = commit --amend
  
  # Undo last commit but keep changed files in stage
  uncommit = reset --soft HEAD~1
  
  # Remove file(s) from Git but not from disk
  untrack = rm --cache --

[core]
  # Don't paginate output by default
  pager = cat

  # Global ignore file (not shared)
  excludesfile = ~/.gitignore_global

  # Global shared hooks directory
  # hooksPath = ~/.githooks

  # Default editor for git commands (e.g. `git commit`, `git rebase`)
  editor = code --wait

  # Don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space

[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b
  mnemonicPrefix = true
  
  # Show renames/moves as such
  renames = true
  
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .
  
  # Display submodule-related information (commit listings)
  submodule = log
  
  # Use VSCode as default diff tool when running `git diff-tool`
  tool = vscode

[difftool "vscode"]
  cmd = code --wait --diff $LOCAL $REMOTE

[fetch]
  # Auto-fetch submodule changes (sadly, won't auto-update)
  recurseSubmodules = on-demand

[grep]
  break = true
  heading = true
  lineNumber = true
  
  # Consider most regexes to be ERE
  extendedRegexp = true

[log]
  # Use abbrev SHAs whenever possible/relevant instead of full 40 chars
  abbrevCommit = true
  
  # Automatically --follow when given a single path
  follow = true
  
  # Disable decorate for reflog (because there is no dedicated `reflog` section available)
  decorate = false

[merge]
  # Display common-ancestor blocks in conflict hunks
  # conflictStyle = diff3
  
  # Disable fast-forward merges as default merge strategy
  ff = false
  
  # Custom/dedicated merge drive for npm lock files (`package-lock.json`)
  # See https://www.npmjs.com/package/npm-merge-driver
  # [merge "npm-merge-driver"]
  # name = automatically merge npm lockfiles
  # driver = npx npm-merge-driver merge %A %O %B %P

[mergetool]
  # Clean up backup files created by merge tools on tool exit
  keepBackup = false
  
  # Clean up temp files created by merge tools on tool exit
  keepTemporaries = false
  
  # Put the temp files in a dedicated dir anyway
  writeToTemp = true
  
  # Auto-accept file prompts when launching merge tools
  prompt = false

[pull]
  # This is GREAT… when you know what you're doing and are careful
  # not to pull --no-rebase over a local line containing a true merge
  rebase = merges

[push]
  # Default push should only push the current branch to its push target, regardless of its remote name
  default = upstream
  
  # When pushing, also push tags whose commit-ishs are now reachable upstream
  followTags = true

[status]
  # Display submodule rev change summaries in status
  submoduleSummary = true
  
  # Recursively traverse untracked directories to display all contents
  showUntrackedFiles = all

[color "branch"]
  # Change branch color for clarity in `git branch -vv` output
  upstream = cyan

[tag]
  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0
  sort = version:refname

[versionsort]
  # Suffixes that should be treated as pre-release versions (e.g. -beta, -rc)
  prereleaseSuffix = -pre
  prereleaseSuffix = .pre
  prereleaseSuffix = -beta
  prereleaseSuffix = .beta
  prereleaseSuffix = -rc
  prereleaseSuffix = .rc

# Core settings below (described)

core.fileMode = true  # Detect file mode changes (e.g., executable permissions)
core.hideDotFiles = dotGitOnly  # Hide files that begin with dot except .git directory
core.ignoreCase = true  # Ignore case differences in filenames (useful for cross-platform)
core.precomposeUnicode = true  # Help handle precomposed Unicode characters on macOS
core.protectHFS = true  # Protect HFS file system from unexpected operations
core.protectNTFS = true  # Protect NTFS file system from unexpected operations
core.fsmonitor = true  # Enable filesystem monitoring (optimizes performance on large repositories)
core.fsmonitorHookVersion = 1  # Version for the fsmonitor hook
core.trustctime = false  # Do not trust the commit time to determine file changes
core.splitIndex = true  # Enable split index for optimization of disk storage
core.untrackedCache = true  # Cache the status of untracked files
core.checkStat = true  # Check file status for modification before committing
core.quotePath = true  # Quote paths for special characters
core.eol = lf  # End of line convention (use LF by default)
core.safecrlf = true  # Enforce safe CRLF handling in text files
core.autocrlf = true  # Automatically convert line endings between Windows and Unix
core.checkRoundtripEncoding = true  # Ensure that file encoding does not change unexpectedly
core.symlinks = true  # Enable symlink support
core.gitProxy = ""  # Define a proxy for git operations
core.sshCommand = "ssh"  # Default command for git operations using SSH
core.ignoreStat = true  # Don't track the file status during operations
core.preferSymlinkRefs = true  # Prefer symlink references instead of hardlinks
core.alternateRefsCommand = ""  # Path to a script for alternate reference handling
core.alternateRefsPrefixes = ""  # Prefix for alternate references
core.bare = false  # Disable bare repository mode (used in server environments)
core.worktree = ""  # Specify the working tree for the repository
core.logAllRefUpdates = true  # Track all reference updates
core.repositoryFormatVersion = 0  # Version of the git repository format
core.sharedRepository = false  # Disable sharing of the repository
core.warnAmbiguousRefs = true  # Warn when ambiguous references are found
core.compression = 9  # Set the compression level for objects in the repository
core.looseCompression = 6  # Set loose object compression level
core.packedGitWindowSize = 10m  # Window size for packed git objects
core.packedGitLimit = 10g  # Limit the packed git objects size
core.deltaBaseCacheLimit = 2g  # Cache limit for delta bases
core.bigFileThreshold = 100m  # File size threshold for git operations
core.excludesFile = "~/.gitignore_global"  # Path to the global ignore file
core.askPass = ""  # Path to the password prompt helper
core.attributesFile = ""  # Path to the git attributes file
core.hooksPath = ""  # Path to the custom git hooks directory
core.editor = "code --wait"  # Set editor for Git commands (VSCode in this case)
core.commentChar = "#"  # Comment character used in git configuration
core.filesRefLockTimeout = 5m  # Timeout for file reference locking
core.packedRefsTimeout = 5m  # Timeout for packed reference operations
core.pager = "cat"  # Disable pagination for git output
core.whitespace = "trailing-space"  # Ignore trailing space
